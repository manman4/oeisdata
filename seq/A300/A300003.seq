%I A300003 #29 Sep 28 2025 13:21:03
%S A300003 1,1,1,1,1,3,2,1,6,15,2,1,10,52,55,2,1,15,129,389,184,2,1,21,266,1563,
%T A300003 2539,648,2,1,28,487,4642,16445,16604,2111,2,1,36,820,11407,69863,
%U A300003 169034,105365,6352,2,1,45,1297,24600,228613,1016341,1686534,654030,17337,2
%N A300003 Triangle read by rows: T(n, k) = number of permutations that are k "block reversals" away from 12...n, for n >= 0, and (for n>0) 0 <= k <= n-1.
%H A300003 Bert Dobbelaere, <a href="/A300003/b300003.txt">Table of n, a(n) for n = 0..105</a>  (terms n=0..78 from Sean A. Irvine).
%H A300003 A. Chervov et al., <a href="https://arxiv.org/abs/2509.19162">CayleyPy Growth: Efficient growth computations and hundreds of new conjectures on Cayley graphs (Brief version)</a>, arXiv:2509.19162 [math.CO], 2025. See p. 35.
%F A300003 Sum_{k>=1} k * T(n,k) = A380576(n). - _Alois P. Heinz_, Mar 26 2025
%e A300003 For n=3, the permutation 123 is reachable in 0 steps, 213 (reverse 12), 132 (reverse 23), 321 (reverse 123) are reachable in 1 step, and 231, 312 are reachable in 2 steps. Thus row 3 of the triangle is 1, 3, 2.
%e A300003 Triangle begins:
%e A300003   1; (empty permutation, n = 0)
%e A300003   1;
%e A300003   1,   1;
%e A300003   1,   3,   2;
%e A300003   1,   6,  15,   2;
%e A300003   1,  10,  52,  55,   2;
%e A300003   1,  15, 129, 389, 184,   2;
%e A300003   ...
%e A300003 The sum of row n is n! since each permutation of length n is accounted for in that row.
%o A300003 (Python)
%o A300003 def row(n):
%o A300003     perm = tuple(range(1, n+1)); reach = {perm}; frontier = {perm}
%o A300003     out = [1] if n == 0 else []
%o A300003     for k in range(n):
%o A300003         r1 = set()
%o A300003         out.append(len(frontier))
%o A300003         while len(frontier) > 0:
%o A300003             q = frontier.pop()
%o A300003             for i in range(n):
%o A300003                 for j in range(i+1, n+1):
%o A300003                     qp = list(q)
%o A300003                     qp[i:j] = qp[i:j][::-1]
%o A300003                     qp = tuple(qp)
%o A300003                     if qp not in reach:
%o A300003                         reach.add(qp)
%o A300003                         r1.add(qp)
%o A300003         frontier = r1
%o A300003     return out
%o A300003 print([an for n in range(9) for an in row(n)]) # _Michael S. Branicky_, Jan 26 2023
%Y A300003 Cf. A000217 (column 1), A007972 (column 2), A007975 (column 3), A007973 (T(n, n-2)), A007974 (T(n, n-3)).
%Y A300003 Row sums give A000142.
%Y A300003 Cf. A380576.
%K A300003 nonn,tabf
%O A300003 0,6
%A A300003 _Sean A. Irvine_, Feb 22 2018
