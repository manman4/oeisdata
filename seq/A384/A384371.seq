%I A384371 #8 May 30 2025 23:34:03
%S A384371 1,3,9,27,75,201,513,1269,3033,7047,15903,35031,75291,158487,326889,
%T A384371 662259,1318803,2585931,4996251,9524343,17925495,33341619,61324821,
%U A384371 111624927,201179643,359232897,635814867,1116019719,1943414733,3358893675,5763797829
%N A384371 Number of rich ternary words of length n.
%C A384371 A word of length n is "rich" if it contains, as subwords, exactly n + 1 distinct palindromes (including the empty word). Here "subword" means contiguous subsequence of the word.
%H A384371 A. Glen, J. Justin, S. Widmer and L. Q. Zamboni, <a href="https://doi.org/10.1016/j.ejc.2008.04.006">Palindromic richness</a>, European Journal of Combinatorics, 30 (2009), 510-531.
%H A384371 M. Rubinchik and A. M. Shur, <a href="https://doi.org/10.1016/j.ejc.2017.07.021">EERTREE: An efficient data structure for processing palindromes in strings</a>, European Journal of Combinatorics, 68 (2018), 249-265.
%H A384371 J. Rukavicka, <a href="https://doi.org/10.1007/978-3-319-62809-7_26">On the number of rich words</a>. In: Ã‰. Charlier, J. Leroy, and M. Rigo (eds) Developments in Language Theory, DLT 2017, Lecture Notes in Computer Science, vol. 10396, pp. 345-352, Springer, 2017.
%o A384371 (Python)
%o A384371 from itertools import product
%o A384371 def rich(w):
%o A384371     subs = (w[i:j] for i in range(len(w)) for j in range(i+1, len(w)+1))
%o A384371     return len(w) == sum(1 for s in set(subs) if s == s[::-1])
%o A384371 def a(n):
%o A384371     if n == 0: return 1
%o A384371     return sum(3 for b in product("012", repeat=n-1) if rich("0"+"".join(b)))
%o A384371 print([a(n) for n in range(13)]) # _Michael S. Branicky_, May 27 2025
%Y A384371 Cf. A216264.
%K A384371 nonn
%O A384371 0,2
%A A384371 _Lucas Mol_, May 27 2025
