%I A317060 #32 Sep 23 2025 17:44:03
%S A317060 1,1,3,14,85,642,5782,60484,720495,9627210,142583430,2318126196,
%T A317060 41042117558,786002475244,16189215818220,356847596226840,
%U A317060 8381418010559225,208967274455769810,5511890008010697306
%N A317060 a(n) is the number of time-dependent assembly trees satisfying the edge gluing rule for a cycle on n vertices.
%C A317060 A time-dependent assembly tree for a connected graph G=(V, E) on n vertices is a rooted tree, each node of which is label a subset U of V and a nonnegative integer i such that:
%C A317060 1) each internal node has at least two children,
%C A317060 2) there are leaves labeled (v, 0) for each vertex v in V,
%C A317060 3) the label on the root is (V, m) for 1 <= m <= n-1,
%C A317060 4) for each node (U, i) with i < m, U is the union of the {u} for the children (u, 0) of (U, i),
%C A317060 5) if (U, i) and (U', i') are adjacent nodes with U a subset of U', then i<i',
%C A317060 6) for each 0 <= i <= m, there exists a node (U, i) with U a subset of V.
%C A317060 A time-dependent assembly tree is said to satisfy the edge gluing rule if each internal vertex v of G has exactly two children and if U_1 and U_2 are the labels of the children of internal vertex v, then there is an edge (v_1,v_2) in the edge set of G such that v_1 is in U_1 and v_2 is in U_2.
%H A317060 M. Bona and A. Vince, <a href="https://arxiv.org/abs/1204.3842">The Number of Ways to Assemble a Graph</a>, arXiv preprint arXiv:1204.3842 [math.CO], 2012.
%H A317060 A. Dougherty, N. Mayers, and R. Short, <a href="https://arxiv.org/abs/1807.08079"> How to Build a Graph in n Days: Some Variants on Graph Assembly</a>, arXiv preprint arXiv:1807.08079 [math.CO], 2018.
%F A317060 a(n) = Sum_{j=1..floor(n/2)}(binomial(n-j, n-2j)+binomial(n-j-1,n-2j))*a(n-j), a(1)=a(2)=1.
%t A317060 Nest[Function[{a, n}, Append[a, Sum[(Binomial[n - j, n - 2 j] + Binomial[n - j - 1, n - 2 j]) a[[n - j]], {j, Floor[n/2]}]]][#, Length@ # + 1] &, {1, 1}, 17] (* _Michael De Vlieger_, Jul 26 2018 *)
%o A317060 (SageMath)
%o A317060 @cached_function
%o A317060 def TimeDepenEdgeCyc(n):
%o A317060     if n==1:
%o A317060         return 1
%o A317060     elif n==2:
%o A317060         return 1
%o A317060     else:
%o A317060         return sum((binomial(n-j,n-2*j)+binomial(n-j-1, n-2*j))*TimeDepenEdgeCyc(n-j) for j in range(1, (n//2)+1))
%o A317060 print(','.join(str(TimeDepenEdgeCyc(i)) for i in range(1, 20)))
%o A317060 (PARI) lista(nn) = my(v = vector(nn)); for (n=1, nn, if (n<=2, v[n] = 1, v[n] = sum(j=1, n\2, (binomial(n-j, n-2*j)+binomial(n-j-1,n-2*j))*v[n-j]))); v; \\ _Michel Marcus_, Aug 08 2018
%Y A317060 Cf. A047781, A317057, A317059.
%K A317060 easy,nonn
%O A317060 1,3
%A A317060 _Nick Mayers_, _Robert Short_, _Aria Dougherty_, Jul 20 2018
