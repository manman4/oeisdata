%I A383422 #21 Jun 06 2025 00:09:53
%S A383422 0,1,1,0,0,1,1,0,1,1,0,0,1,1,0,0,1,1,0,1,1,0,0,1,1,0,1,1,0,0,1,1,0,0,
%T A383422 1,1,0,1,1,0,0,1,1,0,0,1,1,0,1,1,0,0,1,1,0,1,1,0,0,1,1,0,0,1,1,0,1,1,
%U A383422 0,0,1,1,0,1,1,0,0,1,1,0,0,1,1,0,1,1
%N A383422 The infinite Lucas word; the limiting word generated by s(0) = 0, s(1) = 011, and s(n) = s(n-1)s(n-2).
%C A383422 The lengths of initial words generated by s(0) = 0, s(1) = 011, and s(n) = s(n-1)s(n-2) are the Lucas numbers, A000032, in analogy to lengths of initial words generated by s(0) = 0, s(1) = 01, and s(n) = s(n-1)s(n-2), which are the Fibonacci numbers, A000045. See A003849, especially the cross-reference section, for variants of the infinite Fibonacci word that are analogous to variants of the infinite Lucas word.
%F A383422 In the infinite Fibonacci word A003849, replace each 1 by 11.
%F A383422 a(n) = 1 - A287772(n+1) for n>=0.
%e A383422 The initial words are 0, 011, 0110, 0110011, 01100110110, ...  with  lengths  1, 3, 4, 7, 11, ... .
%t A383422 s[0] = "0"; s[1] = "011";
%t A383422 s[n_] := StringJoin[s[n - 1], s[n - 2]]; s[10] (* A383422, as a word *)
%t A383422 Join[{0}, IntegerDigits[FromDigits[s[10]]]]    (* A383422, sequence *)
%t A383422 (* Second program: positions of 1 in A383422 *)
%t A383422 r = GoldenRatio; f[k_] := Floor[k*r^2];
%t A383422 p[k_, j_] := f[k] + Floor[(f[k] - 1)/r^2] + j;
%t A383422 Flatten[Table[p[k, j], {k, 1, 10}, {j, 0, 1}]]
%t A383422 (* _Clark Kimberling_, May 24 2025 *)
%o A383422 (Python)
%o A383422 from math import isqrt
%o A383422 def A050140(n): return (n+isqrt(5*n**2)&-2)-n
%o A383422 def A383422(n):
%o A383422     def bsearch(f, n):
%o A383422         kmin, kmax = 0, 1
%o A383422         while f(kmax) <= n:
%o A383422             kmax <<= 1
%o A383422         kmin = kmax>>1
%o A383422         while True:
%o A383422             kmid = kmax+kmin>>1
%o A383422             if f(kmid) > n:
%o A383422                 kmax = kmid
%o A383422             else:
%o A383422                 kmin = kmid
%o A383422             if kmax-kmin <= 1:
%o A383422                 break
%o A383422         return kmin
%o A383422     return int(A050140(bsearch(A050140,n+1))!=n+1) # _Chai Wah Wu_, May 22 2025
%o A383422 (Python)
%o A383422 def aupto(nn): # return list of terms from 0..nn
%o A383422     s1, s = [0], [0, 1, 1]
%o A383422     while len(s) < nn+1:
%o A383422         s, s1 = s+s1, s
%o A383422     return s[:nn+1]
%o A383422 print(aupto(85)) # _Michael S. Branicky_, May 23 2025
%Y A383422 Cf. A000032, A000045, A050140 (positions of 0), A287775 (positions of 1),  A383423, A383424, A383425, A383426, A383427.
%K A383422 nonn
%O A383422 0
%A A383422 _Clark Kimberling_, Apr 27 2025
