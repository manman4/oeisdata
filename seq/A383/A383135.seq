%I A383135 #24 May 05 2025 16:44:05
%S A383135 0,1,2,1,3,1,5,2,3,2,3,2,4,2,4,2,6,2,4,2,6,2,13,2,13,2,8,3,8,3,10,3,
%T A383135 10,3,3,3,10,3,5,3,10,3,5,3,5,3,6,3,5,3,5,3,17,3,5,3,5,3,17,3,3,3,3,2,
%U A383135 12,2,3,2,5,2,5,2,12,2,3,2,7,2,3,2,7,2,7,2
%N A383135 a(n) = number of iterations that n requires to reach 1 under the x -> A380891(x) map, or -1 if it never does.
%C A383135 A380891(x) map is If x mod 2 = 0 then a(x) = floor(x^(1/3)) else a(x) = floor(x^(4/3)).
%C A383135 The map x -> A380891(x) is conjectured to eventually reach 1 for all starting x > 0. Tested for x <= 7892481.
%H A383135 James C. McMahon, <a href="/A383135/b383135.txt">Table of n, a(n) for n = 1..10000</a>
%H A383135 Vikram Prasad and M. A. Prasad, <a href="https://www.researchgate.net/publication/387868199_ESTIMATES_OF_THE_MAXIMUM_EXCURSION_CONSTANT_AND_STOPPING_CONSTANT_OF_JUGGLER-LIKE_SEQUENCES">Estimates of the maximum excursion constant and stopping constant of juggler-like sequences</a>, ResearchGate, 2025.
%t A383135 fj[n_]:=If[Mod[n,2]==0,Floor[Surd[n,3]],Floor[n^(4/3)]];a383135[n_]:= Length[ NestWhileList[fj, n, # != 1 &]] - 1; Array[ a383135, 84]
%o A383135 (Python)
%o A383135 import sys
%o A383135 import gmpy2
%o A383135 sys.set_int_max_str_digits(0)
%o A383135 def floorJuggler(n) :
%o A383135     a=n
%o A383135     count=0
%o A383135     while (a > 1) :
%o A383135         b=0
%o A383135         if (a%2 == 0) :
%o A383135             b1=gmpy2.iroot(a,3)
%o A383135             b=b1[0]
%o A383135             count=count+1
%o A383135         else :
%o A383135             b1=gmpy2.iroot(a**4,3)
%o A383135             b=b1[0]
%o A383135             count=count+1
%o A383135         a=b
%o A383135     return count
%o A383135 for i in range (1, 100) :
%o A383135     print (i, floorJuggler(i))
%Y A383135 Cf. A380891, A381246.
%Y A383135 Cf. A006577.
%K A383135 nonn
%O A383135 1,3
%A A383135 _James C. McMahon_ and _Vikram Prasad_, Apr 17 2025
