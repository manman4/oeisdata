%I A254868 #37 Sep 22 2025 16:01:19
%S A254868 6,2,8,4,16,12,48,44,40,36,32,28,24,20,80,76,72,68,64,60,56,52,208,
%T A254868 204,200,196,192,188,184,180,176,172,168,164,160,156,152,148,144,140,
%U A254868 136,132,128,124,120,116,112,108,104,100,96,92,88,84,336,332,328,324
%N A254868 Recamán [-, +, *]-sequence with seed 6 and step 4.
%C A254868 Starting at the seed number (6) the sequence continues by subtracting, adding or multiplying by the step number (4). Subtracting gets precedence over addition which gets precedence over multiplication. The new number must be a positive integer and not previously listed. The sequence terminates if this is impossible, but for this seed (6) and step (4) the sequence is infinite.
%C A254868 More chaotic sequences are obtained if division is included: cf. A254873.
%C A254868 These sequences were first explored by Brian Kehrig, a 15-year-old student at Renert School, Calgary, Canada.
%C A254868 They are exceptionally nice sequences to introduce to the elementary school math classroom.
%C A254868 Like many Recamán sequences, this is worth listening to.
%H A254868 Reinhard Zumkeller, <a href="/A254868/b254868.txt">Table of n, a(n) for n = 1..100000</a>
%e A254868 a(1) = 6.  a(2) = 6-4 = 2.  a(3) = 2*4 = 8.  a(4) = 8-4 = 4.  a(5) = 4*4 = 16.  a(6) = 16-4 = 12.  a(7) = 12*4 = 48 ...
%o A254868 (SageMath)
%o A254868 A=[6]
%o A254868 step=4
%o A254868 for i in [1..100]:
%o A254868     if A[i-1]-step>0 and (A[i-1]-step) not in A:
%o A254868         A.append(A[i-1]-step)
%o A254868     else:
%o A254868         if not((A[i-1]+step) in A):
%o A254868             A.append(A[i-1]+step)
%o A254868         else:
%o A254868             A.append(step*A[i-1])
%o A254868 A # - _Tom Edgar_, Feb 16 2015
%o A254868 (Haskell)
%o A254868 import Data.Set (Set, singleton, notMember, insert)
%o A254868 a254868 n = a254868_list !! (n-1)
%o A254868 a254868_list = 6 : kehrig (singleton 6) 6 where
%o A254868    kehrig s x | x > 4 && (x - 4) `notMember` s =
%o A254868                 (x - 4) : kehrig (insert (x - 4) s) (x - 4)
%o A254868               | (x + 4) `notMember` s =
%o A254868                 (x + 4) : kehrig (insert (x + 4) s) (x + 4)
%o A254868               | otherwise =
%o A254868                 (x * 4) : kehrig (insert (x * 4) s) (x * 4)
%o A254868 -- _Reinhard Zumkeller_, Feb 25 2015
%o A254868 (Python)
%o A254868 from sympy import primerange, prime
%o A254868 def aupton(nn, seed=6, step=4):
%o A254868   alst, step = [seed], step
%o A254868   for n in range(1, nn+1, 1):
%o A254868     x, y, z = alst[-1] - step, alst[-1] + step, alst[-1] * step
%o A254868     if    x > 0 and x not in alst: alst.append(x)
%o A254868     elif  y > 0 and y not in alst: alst.append(y)
%o A254868     elif  z > 0 and z not in alst: alst.append(z)
%o A254868     else: break
%o A254868   return alst
%o A254868 print(aupton(57)) # _Michael S. Branicky_, Jun 02 2021
%Y A254868 Cf. A005132 (original Recamán sequence).
%Y A254868 Cf. A254873 (an example with division at the top in the hierarchy of operations).
%K A254868 easy,hear,nonn
%O A254868 1,1
%A A254868 _Gordon Hamilton_, Feb 09 2015
