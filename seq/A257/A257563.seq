%I A257563 #17 Sep 22 2025 16:01:21
%S A257563 1,0,2,0,1,3,0,1,5,4,0,1,10,14,5,0,1,19,48,30,6,0,1,36,149,158,55,7,0,
%T A257563 1,69,445,727,413,91,8,0,1,134,1308,3126,2638,924,140,9,0,1,263,3822,
%U A257563 12932,15396,7818,1848,204,10,0,1,520,11159,52278,84920,59382,19998,3396,285,11
%N A257563 Triangle read by rows, coefficients T(n,k) of polynomials related to the Bell polynomials, for n>=0 and 0<=k<=n.
%C A257563 The multivariate partial Bell polynomials as defined for example by L. Comtet, Advanced Combinatorics, depend on the variables x_1, x_2, ... Here we add a variable x_0 to cover the case of the first column (k=0) in the lower triangular matrix of the coefficients of the polynomials in a systematic way. The Bell polynomial is defined in the usual way as the row sum of the partial Bell polynomials and the univariate Bell polynomial as the Bell polynomial with all x_n set to the same variable x. We call these polynomials the x0-based univariate Bell polynomials. The classical univariate Bell polynomials are obtained by substituting x_0 = 0 prior to collapsing the x_n to one variable. In this case the coefficients of the polynomials are the Stirling subset numbers. The triangle given here are the coefficients of the polynomials in the general case.
%D A257563 L. Comtet, Advanced Combinatorics, Reidel, 1974, p. 135.
%H A257563 Peter Luschny, <a href="https://oeis.org/wiki/User:Peter_Luschny/Marginalia">The Bell Transform</a>
%F A257563 Row sums are Bell(n)*(2-0^n) = A186021(n).
%e A257563 The triangle starts:
%e A257563 [1]
%e A257563 [0, 2]
%e A257563 [0, 1, 3]
%e A257563 [0, 1, 5, 4]
%e A257563 [0, 1, 10, 14, 5]
%e A257563 [0, 1, 19, 48, 30, 6]
%e A257563 [0, 1, 36, 149, 158, 55, 7]
%p A257563 T_row := proc(n) local T; T := proc(n,k) option remember; if k = 0 then x^n else add(binomial(n-1,j-1)*T(n-j,k-1)*x, j=0..n-k+1) fi end; PolynomialTools:-CoefficientList(add(T(n,k),k=0..n), x) end: seq(print(T_row(n)), n=0..6);
%t A257563 T[n_, k_] := T[n, k] = If[k==0, x^n, Sum[Binomial[n-1, j-1]*T[n-j, k-1]*x, {j, 0, n-k+1}]]; row[n_] := CoefficientList[Sum[T[n, k], {k, 0, n}], x]; Table[row[n], {n, 0, 10}] // Flatten (* _Jean-Fran√ßois Alcover_, Jan 20 2016, adapted from Maple *)
%o A257563 (SageMath)
%o A257563 def partial_bell_polynomial(n,k):
%o A257563     X = var(['x_'+str(i) for i in (0..n+1)])
%o A257563     @cached_function
%o A257563     def T(n,k):
%o A257563         if k==0: return X[0]^n
%o A257563         return sum(binomial(n-1,j-1)*X[j]*T(n-j,k-1) for j in (0..n-k+1))
%o A257563     return T(n,k).expand()
%o A257563 def univariate_bell_polynomial(n): # for comparison only
%o A257563     p = sum(partial_bell_polynomial(n,k) for k in (0..n)).subs(x_0=0)
%o A257563     q = p({p.variables()[i]:x for i in range(len(p.variables()))})
%o A257563     R = PolynomialRing(QQ,'x')
%o A257563     return R(q)
%o A257563 def x0_based_univariate_bell_polynomial(n):
%o A257563     p = sum(partial_bell_polynomial(n,k) for k in (0..n))
%o A257563     q = p({p.variables()[i]:x for i in range(len(p.variables()))})
%o A257563     R = PolynomialRing(QQ,'x')
%o A257563     return R(q)
%o A257563 for n in (0..6): x0_based_univariate_bell_polynomial(n).list()
%Y A257563 Cf. A000110, A048993, A186021.
%K A257563 nonn,tabl,easy
%O A257563 0,3
%A A257563 _Peter Luschny_, May 10 2015
