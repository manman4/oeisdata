%I A382048 #29 Mar 30 2025 00:16:59
%S A382048 1,2,2,3,3,4,4,5,4,5,5,6,6,7,6,7,7,8,8,9,7,8,8,9,9,10,9,10,10,11,11,
%T A382048 12,9,10,10,11,11,12,11,12,12,13,13,14,12,13,13,14,14,15,14,15,15,16,
%U A382048 16,17,13,14,14,15,15,16,15,16,16,17,17,18,16,17,17,18,18,19,18,19,19,20,20,21,18,19,19
%N A382048 Starting from n and decrement, d = 1 we repeatedly subtract d until we reach a multiple of d+1. Whereupon we set d := d+1 and continue the process. a(n) is the total number of subtractions required to reduce n to 0.
%C A382048 The remainder after each subtraction is always a multiple of d so that either 0 or a multiple of d+1 will be reached.
%H A382048 Howard J. Bradley, <a href="/A382048/b382048.txt">Table of n, a(n) for n = 1..10000</a>
%F A382048 a(2n) = a(2n-1) + 1.
%F A382048 a(2n+1) <= a(2n).
%e A382048 For n=8: 8 -> 7 -> 6 -> 4 -> 2 -> 0. Five steps, so a(8) = 5.
%e A382048 For n=9: 9 -> 8 -> 6 -> 3 -> 0.      Four steps, so a(9) = 4.
%o A382048 (Haskell)
%o A382048 a' n d = if n == 0 then 0 else if (n - d) `mod` (d + 1) == 0 then 1 + a' (n-d) (d+1) else 1 + a' (n-d) d
%o A382048 a n = a' n 1
%o A382048 (Python)
%o A382048 def a(n):
%o A382048    d = 1
%o A382048    steps = 0
%o A382048    while(n > 0):
%o A382048       n = n - d
%o A382048       steps += 1
%o A382048       if(n % (d+1) == 0):
%o A382048          d += 1
%o A382048    return steps
%K A382048 nonn
%O A382048 1,2
%A A382048 _Howard J. Bradley_, Mar 13 2025
