%I A385522 #15 Jul 23 2025 16:14:20
%S A385522 1,5,4,3,2,1,2,2,3,3,4,3,5,4,4,4,5,4,5,4,5,5,5,4,5,5,4,4,6,5,6,5,5,5,
%T A385522 6,5,7,6,6,4,7,6,6,5,4,6,5,4,5,6,6,5,5,4,6,5,6,6,7,6,7,6,5,6,6,6,7,6,
%U A385522 5,5,7,6,6,5,5,5,6,6,6,5,6,6,6,5,6,7,6,5,6,5,6,5,7,7,6
%N A385522 Sum of factors chain length.
%C A385522 We generate a chain via the following method:
%C A385522 Start with a number N. Compute the noncomposite factors of N and sum them together to get N'. Iterate this procedure until you reach a number you've already seen, at which point terminate.
%C A385522 The largest value of the sequence under 1,000,000 is N = 931844, which evaluates to 16.
%C A385522 Question: How quickly does this function grow relative to N?
%e A385522 1 : [[1]] -> 1
%e A385522 2 : [[1, 2], [1, 3], [1, 2, 2], [1, 5], [1, 2, 3]] -> 5
%e A385522 3 : [[1, 3], [1, 2, 2], [1, 5], [1, 2, 3]] -> 4
%e A385522 4 : [[1, 2, 2], [1, 5], [1, 2, 3]] -> 3
%e A385522 5 : [[1, 5], [1, 2, 3]] -> 2
%e A385522 6 : [[1, 2, 3]] -> 1
%e A385522 7 : [[1, 7], [1, 2, 2, 2]] -> 2
%e A385522 8 : [[1, 2, 2, 2], [1, 7]] -> 2
%e A385522 9 : [[1, 3, 3], [1, 7], [1, 2, 2, 2]] -> 3
%o A385522 (Python)
%o A385522 def prime_factors(n):
%o A385522   i = 2
%o A385522   factors = [1]
%o A385522   while i * i <= n:
%o A385522     if n % i:
%o A385522       i += 1
%o A385522     else:
%o A385522       n //= i
%o A385522       factors.append(i)
%o A385522   if n > 1:
%o A385522     factors.append(n)
%o A385522   return factors
%o A385522 def sum_of_factors_chain(N):
%o A385522   ctr, cur = 0, N
%o A385522   seen = set()
%o A385522   while cur not in seen:
%o A385522     factors = prime_factors(cur)
%o A385522     seen.add(cur)
%o A385522     cur = sum(factors)
%o A385522     ctr += 1
%o A385522   return ctr
%Y A385522 Cf. A008578.
%K A385522 nonn
%O A385522 1,2
%A A385522 _Philip Weiss_, Jul 01 2025
