%I A389975 #18 Oct 30 2025 17:59:40
%S A389975 1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,6,6,6,6,6,6,7,7,7,7,7,7,8,8,8,8,8,
%T A389975 8,9,9,9,9,10,10,10,10,10,10,10,10,11,11,12,12,12,12,13,13,13,13,13,
%U A389975 13,14,14,14,14,14,14,14,14,14,14,15,15,16,16,16,16
%N A389975 Maximum cardinality of a set of disjoint congruence classes with distinct moduli, each at most n.
%H A389975 Christian Sievers, <a href="/A389975/b389975.txt">Table of n, a(n) for n = 1..100</a>
%H A389975 Thomas Bloom, <a href="https://www.erdosproblems.com/202">Problem 202</a>, Erdős Problems.
%H A389975 Régis De La Bretèche, Kevin Ford, and Joseph Vandehey, <a href="http://doi.org/10.4064/aa157-4-5">On non-intersecting arithmetic progressions</a>, Acta Arithmetica 157.4 (2013): 381-392.
%H A389975 Paul Erdős, <a href="https://real.mtak.hu/id/eprint/201135">Some unsolved problems</a>, A Magyar Tudományos Akadémia Matematikai Kutató Intézetének Közleményei 6.1-2 (1961): 221-254.
%H A389975 Erdős problems database contributors, <a href="https://github.com/teorth/erdosproblems/issues/141">Issue 141</a> linking Erdős problems to the OEIS.
%H A389975 David Spencer, <a href="https://github.com/davidspencer6174/erdos_problem_scripts/blob/master/erdos_202.py">More efficient script</a>.
%H A389975 David Spencer, <a href="https://github.com/davidspencer6174/erdos_problem_scripts/blob/master/erdos_202_output.txt">Script output</a> including a maximal set for n 1-44.
%e A389975 For n = 6, an optimal set of congruence classes is {0 (mod 2), 1 (mod 4)}. No integer is expressible as both 2k and 4j+1, so these congruence classes are disjoint. There is no larger set we can use: for example, if we choose moduli 2, 4, and 6, there is no choice of residues that yields a disjoint set.
%e A389975 For n = 12, an optimal set of congruence classes is {0 (mod 3), 1 (mod 6), 2 (mod 9), 4 (mod 12)}.
%o A389975 (Python)
%o A389975 from math import gcd
%o A389975 def a(n, classes_so_far = []):
%o A389975     largest_found = len(classes_so_far)
%o A389975     lower = 1 if largest_found == 0 else classes_so_far[-1][0] + 1
%o A389975     for new_n in range(lower, n + 1):
%o A389975         for new_a in range(0, new_n):
%o A389975             disjoint_all = True
%o A389975             for ni, ai in classes_so_far:
%o A389975                 if (ai - new_a) % gcd(new_n, ni) == 0:
%o A389975                     disjoint_all = False
%o A389975             if disjoint_all:
%o A389975                 largest_found = max(largest_found, a(n, classes_so_far + [(new_n, new_a)]))
%o A389975     return largest_found
%o A389975 print(','.join([str(a(n)) for n in range(1, 20)]))
%o A389975 (clingo)
%o A389975 % Call like this: clingo --conf=frumpy -c n=<n> <filename>
%o A389975 % You may add "-t<num_threads>" for parallelization.
%o A389975 % The achieved size will be reported as a negative number.
%o A389975 {usemod(1..n)}.
%o A389975 :- usemod(M1), usemod(M2), M1<M2, gcd(M1,M2,1).
%o A389975 {mod(0..M-1, M)} = 1 :- usemod(M).
%o A389975 :- mod(R1,M1), mod(R2,M2), M1<M2, gcd(M1,M2,M), (R2-R1)\M=0.
%o A389975 gcd(0,N,N) :- N=1..n.
%o A389975 gcd(A,B,G) :- B=1..n, gcd(B\A,A,G).
%o A389975 #maximize{ 1,M : usemod(M) }.
%o A389975 #show mod/2.
%o A389975 % _Christian Sievers_, Oct 26 2025
%K A389975 nonn,new
%O A389975 1,4
%A A389975 _David Spencer_, Oct 20 2025
%E A389975 a(45) onward from _Christian Sievers_, Oct 26 2025
