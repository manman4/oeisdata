%I A389192 #34 Oct 08 2025 15:43:26
%S A389192 0,1,3,2,6,9,4,11,16,5,13,7,18,10,20,26,8,22,12,28,14,32,17,30,39,35,
%T A389192 15,38,19,44,23,43,21,33,48,25,46,63,27,24,50,41,60,31,29,53,36,58,34,
%U A389192 65,40,67,95,45,74,104,56,88,47,80,42,76,69,37,82,49,85,51
%N A389192 Lexicographically earliest sequence, where a(n) - a(n-1) is unique, and a(a(n)) = n.
%C A389192 Self-inverse permutation of nonnegative numbers since a(a(n)) = n. - _Michael S. Branicky_, Sep 30 2025
%H A389192 Michael S. Branicky, <a href="/A389192/b389192.txt">Table of n, a(n) for n = 0..10000</a>
%H A389192 <a href="/index/Per#IntegerPermutation">Index entries for sequences that are permutations of the natural numbers</a>
%e A389192 a(0) = 0, because lexicographically earliest term and a(a(n)) = n.
%e A389192 a(1) = 1, a(1) cannot be 0, because a(a(1)) = 1, then a(0) = 1, which is already given as a(0) = 0.
%e A389192 a(2) = 3, can neither be 0 or 1, nor 2, because a(1)-a(0) = 1.
%e A389192 a(3) = 2, because a(a(3)) = 3 and a(a(2)) = 2.
%o A389192 (Python)
%o A389192 from itertools import count, islice
%o A389192 def agen(): # generator of terms
%o A389192     a, diffs = {0:0}, set(); yield 0
%o A389192     for n in count(1):
%o A389192         if n in a:
%o A389192             an = a[n]
%o A389192         else:
%o A389192             an = n
%o A389192             while True:
%o A389192                 while an-a[n-1] in diffs or an in a:
%o A389192                     an += 1
%o A389192                 b = {k: a[k] for k in {n-1, n+1, an-1, an+1} if k in a}
%o A389192                 b[n], b[an] = an, n
%o A389192                 newdiffs = [b[k+1]-b[k] for k in b if k+1 in b]
%o A389192                 s = set(newdiffs)
%o A389192                 if len(newdiffs) == len(s) and diffs & s == set():
%o A389192                     break
%o A389192                 an += 1
%o A389192             a[n], a[an] = an, n
%o A389192             diffs |= s
%o A389192         yield an
%o A389192 print(list(islice(agen(), 68))) # _Michael S. Branicky_, Sep 25 2025
%o A389192 (Python)
%o A389192 def okseq(lst): # test whether initial list of values verifies constraints
%o A389192     b = {k: lst[k] for k in range(len(lst))}
%o A389192     diffs = [b[k+1]-b[k] for k in b if k+1 in b]
%o A389192     return len(diffs) == len(set(diffs)) and all(b[b[k]] == k for k in b if b[k] in b)
%o A389192 assert okseq(list(islice(agen(), 68))) # _Michael S. Branicky_, Sep 26 2025
%Y A389192 Cf. A092569.
%K A389192 nonn,new
%O A389192 0,3
%A A389192 _Marc Morgenegg_, Sep 25 2025
%E A389192 a(18) onward from _Michael S. Branicky_, Sep 25 2025
