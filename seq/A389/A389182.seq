%I A389182 #17 Oct 28 2025 22:30:09
%S A389182 1,2,3,3,4,4,5,5,5,5,6,6,6,6,7,7,7,7,7,8,8,8,8,8,9,9,9,9,9,9,10,10,10,
%T A389182 10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,
%U A389182 12,12,13,13,13,13,13,13,13,13,13,13,14
%N A389182 Maximum cardinality of a subset of {1,...,n} in which all sums a+b of elements a<=b are distinct except possibly one.
%C A389182 Many observed extremizing sets are expressible as S union (k - S) for a true Sidon set S and some integer k. Such extremizing sets take advantage of the fact that the exception sum (in this case, k) has no limit on the number of ways it can be expressed as a sum.
%H A389182 Thomas Bloom, <a href="https://www.erdosproblems.com/864">Problem 864</a>, Erdős Problems.
%H A389182 Paul Erdős, <a href="https://hal.science/hal-01108666/">Some of my Forgotten problems in Number Theory</a>, Hardy-Ramanujan Journal 15 (1992).
%H A389182 Paul Erdős and Róbert Freud, <a href="https://doi.org/10.1016/0022-314X(91)90083-N">On sums of a Sidon-sequence</a>, Journal of Number Theory 38.2 (1991): 196-205.
%H A389182 Erdős problems database contributors, <a href="https://github.com/teorth/erdosproblems/issues/143">Issue 143</a> linking Erdős problems to the OEIS.
%H A389182 David Spencer, <a href="https://github.com/davidspencer6174/erdos_problem_scripts/blob/master/erdos_864_output.txt">Extremizing sets</a> from N=1-69.
%H A389182 David Spencer, <a href="https://github.com/davidspencer6174/erdos_problem_scripts/blob/master/erdos_864.py">Script</a> to compute extremizing sets.
%e A389182 For n = 3, an extremal set is {1,2,3}. 4 is an exception here as 1+3=2+2, but no other integer can be written as a sum of elements in two ways.
%e A389182 For n = 4, {1,2,3} is still an extremal set. {1,2,3,4} is not a valid set because 1+3=2+2=4, 1+4=2+3=5, and 2+4=3+3=6, so there is more than one exception.
%e A389182 For n = 7, {1,2,4,6,7} is an extremal set. In this case, the exception 8=1+7=2+6=4+4 is a sum in three ways, which is permitted.
%o A389182 (Python)
%o A389182 from collections import defaultdict
%o A389182 def a(n, nums_so_far = []):
%o A389182     best = len(nums_so_far)
%o A389182     for candidate in range(1 if nums_so_far == [] else nums_so_far[-1] + 1, n + 1):
%o A389182         counts = defaultdict(int)
%o A389182         new_nums = nums_so_far + [candidate]
%o A389182         for ind, val_1 in enumerate(new_nums):
%o A389182             for val_2 in new_nums[ind:]:
%o A389182                 counts[val_1 + val_2] += 1
%o A389182         if sum(1 for value in counts.values() if value > 1) <= 1:
%o A389182             best = max(best, a(n, new_nums))
%o A389182     return best
%o A389182 print(', '.join([str(a(n)) for n in range(1, 20)]))
%K A389182 nonn,new
%O A389182 1,2
%A A389182 _David Spencer_, Oct 23 2025
