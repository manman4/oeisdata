%I A379183 #34 Dec 31 2024 14:39:53
%S A379183 0,1,1,4,5,2,2,7,8,8,4,5,9,9,7,8,15,11,12,16,16,14,15,15,18,19,16,16,
%T A379183 21,22,15,18,26,23,16,21,29,22,18,26,30,23,21,29,29,25,26,30,30,28,29,
%U A379183 36,32,33,37,30,28,36,43,39,40,44,37,35,36,50,46,40,44,44,42,43,50,53,47,44
%N A379183 a(1)=0, a(2)=a(3)=1; a(n) = n - a(a(n-2)) for n>3.
%C A379183 For the interesting properties of this sequence and A379184, see the article "Finding missing gems amidst chaos".
%H A379183 Brad Klee, <a href="https://community.wolfram.com/groups/-/m/t/3289552">Finding missing gems amidst chaos</a>, Wolfram Community, 2024.
%H A379183 Bradley Klee, <a href="/A379183/a379183.sh.txt">Script for generating plaintext call tree (BASH)</a>
%H A379183 Bradley Klee, <a href="/A379183/a379183.go.txt">Script for generating plaintext call tree (Golang)</a>
%H A379183 Bradley Klee, <a href="/A379183/a379183_1.txt">Call tree (Golang output)</a>
%H A379183 Stephen Wolfram, <a href="https://writings.stephenwolfram.com/2024/09/nestedly-recursive-functions/">Nestedly Recursive Functions</a>, 2024.
%F A379183 a(n) ~ n/phi.
%p A379183 a:= proc(n) option remember; `if`(n<4, signum(n-1), n-a(a(n-2))) end:
%p A379183 seq(a(n), n=1..76);  # _Alois P. Heinz_, Dec 21 2024
%t A379183 Block[{a},a[1]=0;a[2]=a[3]=1;a[n_]:=a[n]=n-a[a[n-2]];a/@Range[50]]
%o A379183 (PARI)
%o A379183 a(n)={my(b);b=vector(n);for(n=1, n, b[n]=if(
%o A379183 n==1, 0, n==2, 1, n==3, 1, n-b[b[n-2]]));b[n]}
%o A379183 (Go)
%o A379183 func a(n int) int {
%o A379183     b := make([]int, n+1);
%o A379183     copy(b, []int{0, 0, 1, 1});
%o A379183     for i:=4; i < n+1; i++ {
%o A379183         b[i] = i-b[b[i-2]];
%o A379183     };
%o A379183     return b[n]
%o A379183 }
%Y A379183 Cf. A379184, A005206, A135414, A163801.
%K A379183 nonn
%O A379183 1,4
%A A379183 _Bradley Klee_, Dec 17 2024
