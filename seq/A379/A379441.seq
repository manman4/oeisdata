%I A379441 #18 May 26 2025 00:26:06
%S A379441 1,2,4,6,9,3,18,12,8,16,24,20,14,36,30,25,5,50,15,63,27,45,21,49,7,98,
%T A379441 28,10,44,26,60,22,52,34,76,40,48,32,64,96,80,56,68,38,84,46,100,70,
%U A379441 75,35,147,77,121,11,242,33,72,108,90,39,99,42,92,54,81,135,117,51,126,57,144,120,112,88,116,62,132,58,124,66,140,74,156,82,148,78,153,69
%N A379441 a(1) = 1, a(2) = 2, for a(n) > 2, a(n) is the smallest unused positive number that shares a factor with a(n-1) such that the exponents of each distinct prime factor of a(n-1) differ by one from those of the same prime factors of a(n).
%C A379441 Like A379442, for the terms studied, prime terms p are preceded by p^2 and followed by 2*p^2, can be divisors of terms before they appear as a term themselves, and are distributed in groups of primes, with many primes within the groups differing by six terms. Unlike A379442 not all primes appear in their natural order, although the occurrence of such primes is rare - only three primes are out of order in the first 250000 terms, namely a(13350) = 149, a(18410) = 179, a(21382) = 191. The sequence contains numerous fixed points, these being 1, 2, 34, 46, 218, 370, 410, 462, 474, 1954, 5592, 19186,... . The sequence is conjectured to be a permutation of the positive integers.
%H A379441 Scott R. Shannon, <a href="/A379441/b379441.txt">Table of n, a(n) for n = 1..20000</a>
%H A379441 Scott R. Shannon, <a href="/A379441/a379441.png">Image of the first 250000 terms</a>. The green line is a(n) = n.
%e A379441 a(14) = 36 as 36 = 2^2*3^2 while a(13) = 14 = 2*7 which contains 2^1 as a factor, whose power differs by one from 2^2, and 7^1 as a factor, and 36 contains no power of 7. This is the smallest unused number satisfying these criteria. This is the first term to differ from A379440.
%o A379441 (Python)
%o A379441 from sympy import factorint
%o A379441 from itertools import islice
%o A379441 from collections import Counter
%o A379441 fcache = dict()
%o A379441 def myfactors(n):
%o A379441     global fcache
%o A379441     if n in fcache: return fcache[n]
%o A379441     ans = Counter({p:e for p, e in factorint(n).items()})
%o A379441     fcache[n] = ans
%o A379441     return ans
%o A379441 def agen(): # generator of terms
%o A379441     yield 1
%o A379441     an, a, m = 2, {1, 2}, 3
%o A379441     while True:
%o A379441         yield an
%o A379441         k, fan = m-1, myfactors(an)
%o A379441         sfan = set(fan)
%o A379441         while True:
%o A379441             k += 1
%o A379441             if k in a: continue
%o A379441             fk = myfactors(k)
%o A379441             sfk = set(fk)
%o A379441             if sfk & sfan and all(abs(fk[p]-fan[p])==1 for p in sfan):
%o A379441                 an = k
%o A379441                 break
%o A379441         a.add(an)
%o A379441 print(list(islice(agen(), 88))) # _Michael S. Branicky_, May 25 2025
%Y A379441 Cf. A379440, A379442, A379248, A124010, A027746, A051903, A064413, A348086.
%K A379441 nonn
%O A379441 1,2
%A A379441 _Scott R. Shannon_, Dec 23 2024
