%I A379854 #11 Feb 06 2025 08:22:49
%S A379854 0,1,2,3,4,-4,-3,-2,-1,7,6,5,13,12,11,10,9,8,16,-11,-10,-9,-8,-7,-6,
%T A379854 -5,-13,-12,15,14,22,21,20,19,18,17,25,24,23,31,30,29,28,27,26,34,-30,
%U A379854 -22,-14,-15,-16,-17,-18,-19,-20,-21,-29,-28,-27,-26,-25,-24
%N A379854 a(0) = 0, and for any n > 0, a(n) is the least integer (in absolute value) not yet in the sequence such that the absolute difference of a(n-1) and a(n) is a cube; in case of a tie, preference is given to the positive value.
%C A379854 A variant of A377091 based on cubes instead of squares.
%C A379854 Conjecture: Every integer (positive or negative) appears in this sequence.
%H A379854 Rémy Sigrist, <a href="/A379854/b379854.txt">Table of n, a(n) for n = 0..10000</a>
%H A379854 Rémy Sigrist, <a href="/A379854/a379854.gp.txt">PARI program</a>
%e A379854 The initial terms are:
%e A379854   n   a(n)  |a(n)-a(n-1)|
%e A379854   --  ----  -------------
%e A379854    0     0  N/A
%e A379854    1     1  1^3
%e A379854    2     2  1^3
%e A379854    3     3  1^3
%e A379854    4     4  1^3
%e A379854    5    -4  2^3
%e A379854    6    -3  1^3
%e A379854    7    -2  1^3
%e A379854    8    -1  1^3
%e A379854    9     7  2^3
%e A379854   10     6  1^3
%e A379854   11     5  1^3
%e A379854   12    13  2^3
%e A379854   13    12  1^3
%e A379854   14    11  1^3
%t A379854 A379854list[nmax_] := Module[{s, a = 0, an, u = 1}, s[_] := False; s[0] = True; Join[{0}, Table[a = (While[s[u] && s[-u], u++]; an = u; While[s[an] || !IntegerQ[CubeRoot[Abs[a - an]]], an = Boole[an < 0] - an]; s[an] = True; an), nmax]]];
%t A379854 A379854list[100] (* _Paolo Xausa_, Feb 06 2025 *)
%o A379854 (PARI) \\ See Links section.
%o A379854 (Python)
%o A379854 from sympy import integer_nthroot
%o A379854 from itertools import count, islice
%o A379854 def cond(n): return integer_nthroot(n, 3)[1]
%o A379854 def agen(): # generator of terms
%o A379854     an, aset, m = 0, {0}, 1
%o A379854     for n in count(0):
%o A379854         yield an
%o A379854         an = next(s for k in count(m) for s in [k, -k] if s not in aset and cond(abs(an-s)))
%o A379854         aset.add(an)
%o A379854         while m in aset and -m in aset: m += 1
%o A379854 print(list(islice(agen(), 62))) # _Michael S. Branicky_, Jan 04 2025
%Y A379854 Cf. A377091.
%K A379854 sign
%O A379854 0,3
%A A379854 _Rémy Sigrist_, Jan 04 2025
