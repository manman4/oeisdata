%I A387952 #31 Oct 27 2025 23:04:37
%S A387952 253,517,649,913,1081,1177,1357,1639,1837,1903,1909,1969,2453,2461,
%T A387952 2497,2773,2893,2959,3113,3223,3427,3487,3817,3841,3901,3949,3979,
%U A387952 4037,4117,4213,4279,4829,4897,5029,5129,5137,5221,5269,5489,5533,5599,6049,6127,6187,6193,6259,6313,6457
%N A387952 Squarefree semiprimes whose prime factors are in A073024.
%C A387952 Cài Jìn-Yī (蔡进一) proved that these numbers cannot be factored by Shor's algorithm in the presence of noise.
%C A387952 Squares are omitted because it's easy to detect and factor a square.
%H A387952 Pierre Abbat, <a href="/A387952/b387952.txt">Table of n, a(n) for n = 1..10509</a>
%H A387952 Pierre Abbat, <a href="https://github.com/phma/CaiSemiprimes.jl">Julia program</a>
%H A387952 Jin-Yi Cai, <a href="https://arxiv.org/abs/2306.10072">Shor's algorithm does not factor large integers in the presence of noise</a>, arXiv:2306.10072 [quant-ph], 2023.
%e A387952 6313=59*107, where 59 and 107 are both in A073024 because 58 and 106 have large prime factors 29 and 53 respectively.
%o A387952 (Julia) # See link for complete repo.
%o A387952 using Primes
%o A387952 function isFouvry(p::Integer)
%o A387952   facs=factor(p-1)
%o A387952   p>2 && big(maximum(keys(facs)))^3>big(p)^2
%o A387952 end
%o A387952 function caiSemiprimes(minPrime::Int,maxSemiprime::Int)
%o A387952   if minPrime<11
%o A387952     minPrime=11
%o A387952   end
%o A387952   maxPrime=max(minPrime,maxSemiprime÷minPrime)
%o A387952   primeList=filter(isFouvry,primes(minPrime,maxPrime))
%o A387952   n=length(primeList)
%o A387952   sort(filter(x->x<=maxSemiprime,[primeList[i]*primeList[j] for i in 1:n for j in (i+1):n]))
%o A387952 end
%Y A387952 Cf. A073024.
%K A387952 nonn,changed
%O A387952 1,1
%A A387952 _Pierre Abbat_, Oct 12 2025
