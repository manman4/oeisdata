%I A387987 #12 Oct 22 2025 21:31:36
%S A387987 1,1,3,5,5,1,15,68,147,105,84,42,1,63,722,3098,4720,5940,5112,2520,
%T A387987 1386,462,1,255,7100,58130,157631,297458,374568,306783,236544,137676,
%U A387987 56628,24024,6006,1,1023,67820,1035760,4697979,13005203,22849618,26273624,26203573,20514505,12787918,7515222,3491202,1261260,437580,87516
%N A387987 Triangle read by rows: T(n,k) is the number of 4-dimensional balanced ballot paths of 4n steps such that the height is exactly k, 3 <= k <= 3*n.
%C A387987 For point x (x_1,x_2,x_3,x_4) in the 4-dimensional lattice, we define the height of x as h_4(x) := 3x_1 - x_2 - x_3 - x_4. The 4-dimensional balanced ballot path (multidimensional Dyck path), is a sequence of 4*n steps with initial point (0,0,0,0) and ending at (n,n,n,n) satisfying that each step is a standart unit vector and each point of the path satisfies x_1 >= x_2 >= x_3 >= x_4. T(n,k) is the number of 4-dimensional balanced ballot paths of 4*n steps such that the largest height reached by any point in the path is equal to k, i.e. for at least one intermediate point h(x) = k, but for no points h(x) > k.
%H A387987 Sean A. Irvine, <a href="/A387987/b387987.txt">Table of n, a(n) for n = 1..3725</a> (rows 1..50 flattened)
%e A387987 Triangle begins:
%e A387987   1;
%e A387987   1, 3, 5, 5;
%e A387987   1, 15, 68, 147, 105, 84, 42;
%e A387987   1, 63, 722, 3098, 4720, 5940, 5112, 2520, 1386, 462;
%e A387987   1, 255, 7100, 58130, 157631, 297458, 374568, 306783, 236544, 137676, 56628, 24024, 6006;
%e A387987   ...
%o A387987 (Python)
%o A387987 """change values for the endpoint t(n,n,n,n) and the height bd=k"""
%o A387987 t = (5,5,5,5)
%o A387987 bd = 5
%o A387987 def ht(t):
%o A387987     return 3 * t[0] - t[1] - t[2] - t[3]
%o A387987 def altern(t, bd):
%o A387987     count = 0
%o A387987     if t == (0, 0, 0, 0):
%o A387987         return 1
%o A387987     if t[0] > 0 and t[0] - 1 >= t[1]:
%o A387987         count += altern((t[0] - 1, t[1], t[2], t[3]), bd)
%o A387987     if t[1] > 0 and t[1] - 1 >= t[2] and ht((t[0], t[1] - 1, t[2], t[3])) <= bd:
%o A387987         count += altern((t[0], t[1] - 1, t[2], t[3]), bd)
%o A387987     if t[2] > 0 and t[2] - 1 >= t[3] and ht((t[0], t[1], t[2] - 1, t[3])) <= bd:
%o A387987         count += altern((t[0], t[1], t[2] - 1, t[3]), bd)
%o A387987     if t[3] > 0 and ht((t[0], t[1], t[2], t[3] - 1)) <= bd:
%o A387987         count += altern((t[0], t[1], t[2], t[3] -1), bd)
%o A387987     return count
%o A387987 def exact_height(t, bd):
%o A387987     if bd < 0:
%o A387987         return 0
%o A387987     return altern(t, bd) - altern(t, bd - 1)
%o A387987 print(exact_height(t, bd))
%Y A387987 Row sums are A005790.
%Y A387987 Final terms are A005789.
%Y A387987 Columns k=3..4 are A000012, A024036.
%K A387987 nonn,tabf,new
%O A387987 1,3
%A A387987 _Dimana Pramatarova_ and _Ryota Inagaki_, Oct 13 2025
